// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Store {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  userId     String
  billboards Billboard[]
  categories Category[]
  products   Product[]
  colors     Color[]
  sizes      Size[]
  orders     Order[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Billboard {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  storeId    String     @db.ObjectId
  store      Store      @relation(fields: [storeId], references: [id])
  label      String
  imageUrl   String
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([storeId])
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String    @db.ObjectId
  store       Store     @relation(fields: [storeId], references: [id])
  billboardId String    @db.ObjectId
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  name        String
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

enum ProductStatus {
  draft
  active
  archived
}

model Product {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String           @db.ObjectId
  store       Store            @relation(fields: [storeId], references: [id])
  categoryId  String           @db.ObjectId
  category    Category         @relation(fields: [categoryId], references: [id])
  name        String
  description String?
  status      ProductStatus    @default(active)
  isFeatured  Boolean          @default(false)
  variants    ProductVariant[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([storeId])
  @@index([categoryId])
}

enum ProductVariantStatus {
  active
  disabled
  discontinued
}

model ProductVariant {
  id         String               @id @default(auto()) @map("_id") @db.ObjectId
  productId  String               @db.ObjectId
  product    Product              @relation(fields: [productId], references: [id])
  colorId    String               @db.ObjectId
  color      Color                @relation(fields: [colorId], references: [id])
  sizeId     String               @db.ObjectId
  size       Size                 @relation(fields: [sizeId], references: [id])
  status     ProductVariantStatus @default(active)
  price      Float
  stock      Int
  sku        String?
  orderItems OrderItem[]
  images     Image[]
  createdAt  DateTime             @default(now())
  updatedAt  DateTime             @updatedAt

  @@unique([productId, colorId, sizeId])
  @@unique([sku])
  @@index([productId])
  @@index([colorId])
  @@index([sizeId])
}

model Color {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  storeId   String           @db.ObjectId
  store     Store            @relation(fields: [storeId], references: [id])
  name      String
  value     String
  variants  ProductVariant[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@index([storeId])
}

model Size {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  storeId       String           @db.ObjectId
  store         Store            @relation(fields: [storeId], references: [id])
  label         String
  guideImageUrl String?
  variants      ProductVariant[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  @@index([storeId])
}

model Order {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  storeId    String      @db.ObjectId
  store      Store       @relation(fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
}

model OrderItem {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String         @db.ObjectId
  order     Order          @relation(fields: [orderId], references: [id])
  variantId String         @db.ObjectId
  variant   ProductVariant @relation(fields: [variantId], references: [id])
  quantity  Int
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@index([orderId])
  @@index([variantId])
}

model Image {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  variantId String?         @db.ObjectId
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@index([variantId])
}
